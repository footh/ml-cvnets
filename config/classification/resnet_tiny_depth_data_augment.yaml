common:
  run_label: "depth50_augment4_divbyten_lr0pt4_3step"
  log_freq: 500
  auto_resume: true
  mixed_precision: false
dataset:
  root_train: "../image_data/tiny-imagenet-200/train"
  root_val: "../image_data/tiny-imagenet-200/val/images"
  name: "tinyimagenet"
  category: "classification"
  train_batch_size0: 128
  val_batch_size0: 100
  eval_batch_size0: 100
  workers: 8
  persistent_workers: false
  pin_memory: true
image_augmentation:
  random_gamma_correction:
    enable: true
  #random_resize:
  #  enable: true
  random_zoom_out:
    enable: true
  #random_scale:
  #  enable: true
  random_resized_crop:
    enable: true
    interpolation: "bilinear"
  random_crop:
    enable: true
  random_flip:
    enable: true  
  random_horizontal_flip:
    enable: true
  random_vertical_flip:
    enable: true  
  random_blur:
    enable: true
  #random_rotate:
  #  enable: true  
  random_translate:
    enable: true
  resize:
    enable: true  
  box_absolute_coords:
    enable: true  
  box_percent_coords:
    enable: true
  center_crop:
    enable: true
  #random_jpeg_compress:
  #  enable: true
  random_gauss_noise:
    enable: true
  random_order:
    enable: true
  photo_metric_distort:
    enable: true  
  cutout:
    enable: true    
sampler:
  name: "variable_batch_sampler"
  vbs:
    crop_size_width: 64
    crop_size_height: 64
    max_n_scales: 5
    min_crop_size_width: 64
    max_crop_size_width: 96
    min_crop_size_height: 64
    max_crop_size_height: 96
    check_scale: 8
#
loss:
  category: "classification"
  classification:
    name: "label_smoothing"
    label_smoothing_factor: 0.02
optim:
  name: "sgd"
  weight_decay: 1.e-4
  no_decay_bn_filter_bias: true
  sgd:
    momentum: 0.9
    nesterov: true
scheduler:
  name: "divbyten"
  is_iteration_based: false
  max_epochs: 150
  warmup_iterations: 7500
  warmup_init_lr: 0.05
  divbyten:
    max_lr: 0.4
    min_lr: 2.e-4
    step1epoch: 40
    step2epoch: 80
    step3epoch: 120
model:
  classification:
    name: "resnet"
    n_classes: 200
    activation:
      name: "relu" # specify the activation function that you want to use in the classification network
    resnet:
      depth: 50
  normalization:
    name: "batch_norm_2d"
    momentum: 0.1
  activation:
    name: "relu" # If specific activation function is not specified, this one will be used as a default
    inplace: true
  layer:
    global_pool: "mean"
    conv_init: "kaiming_normal"
    linear_init: "normal"
ema:
  enable: true
  momentum: 0.0005
ddp:
  enable: true
  rank: 0
  world_size: -1
  dist_port: 30786
stats:
  name: [ "loss", "top1", "top5" ]
  checkpoint_metric: "top1"
  checkpoint_metric_max: true
